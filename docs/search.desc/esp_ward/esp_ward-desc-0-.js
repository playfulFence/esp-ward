searchState.loadedDescShard("esp_ward", 0, "esp-ward\nFrozen clock frequencies\nFull-duplex operation\nShorthand for creating a rate which represents hertz.\nI2C peripheral container (I2C)\nI2C Peripheral Instance\nGeneral Purpose Input/Output driver\nShorthand for creating a rate which represents megahertz.\nPeripheral singleton type\nTrait for any type that can be used as a peripheral of …\nSPI peripheral driver\nSPI modes\nTrait for buffers that can be given to DMA for reading.\nTrait for <code>Deref</code> targets used by the blanket <code>DmaReadBuffer</code> …\nTrait for DMA word types used by the blanket DMA buffer …\nTrait for buffers that can be given to DMA for writing.\nTrait for <code>DerefMut</code> targets used by the blanket …\nTrait to be implemented for an in progress dma transfer.\nTrait to be implemented for an in progress dma transfer.\nI2C Peripheral Instance\nChannel HW interface\nChannel interface\nInterface for HW configuration of timer\nInterface for Timers\nExtension trait to split a SYSTEM/DPORT peripheral in …\nTimer peripheral instance\nUART Peripheral Instance\nPins used by the UART interface\nExtension trait for simple short-hands for u64 Durations\nExtension trait for simple short-hands for u32 Rate\nClear the interrupt status bit for this Pin\nResets asserted interrupts\nUnsafely clone (duplicate) a peripheral singleton.\nConfigure channel\nConfigure the timer\nConfigure Channel HW except for the duty which is set via …\nConfigure the HW for the timer\nWiFi Connectivity\nMacro for creating a <code>Joystick</code> instance.\nMacro to create a network stack for WiFi communication.\nRemove a connected <code>signal</code> from this input pin.\nRemove a connected <code>signal</code> from this input pin.\nRemove this output pin from a connected signal.\nRemove this output pin from a connected signal.\nDisplay Module\nAttribute to declare the entry point of the program\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the duty resolution of the timer\nReturn the frequency of the timer\nGet the current source timer frequency from the HW\nReturn the timer frequency, or 0 if not configured\nMacro to retrieve the IP configuration from the network …\nReturn the timer number\nMacro to obtain a suitable timer based on the ESP device …\nMark a function as an interrupt handler.\nShorthand for creating a duration which represents hours.\nInitialize for full-duplex 1 bit mode\nInitializes a custom I2C configuration, allowing for …\nInitializes the default I2C configuration for the ESP …\nInitializes a custom SPI configuration, allowing for …\nInitializes the default SPI configuration for the ESP32. …\nMacro to initialize the WiFi interface with the given SSID …\nInitializes the system clocks and IO pins, providing the …\nMarks a function as an interrupt handler\nGets asserted interrupts\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a value into a <code>PeripheralRef</code>.\nCheck if the timer has been configured\nCheck if the transfer is finished.\nCheck if the transfer is finished.\nCheck whether a duty-cycle fade is running\nCheck whether a duty-cycle fade is running HW\nChecks if the interrupt status bit for this Pin is set\nChecks if listening for interrupts is enabled for this Pin\nShorthand for creating a rate which represents kilohertz.\nListen for interrupts\nListen for the given interrupts\nListen for interrupts\nLoad code to be run on the LP/ULP core.\nCreates a new <code>executor</code> instance and declares an …\nCreate an enum for erased GPIO pins, using the …\nRead bytes from a target slave with the address <code>addr</code> The …\nRead bytes from a target slave with the address <code>addr</code> The …\nSend data bytes from the <code>bytes</code> array to a target slave …\nSend data bytes from the <code>bytes</code> array to a target slave …\nWrite bytes from the <code>bytes</code> array first and then read n …\nWrite bytes from the <code>bytes</code> array first and then read n …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents …\nInitialize the I/O driver.\nCreate a new I2C instance This will enable the peripheral …\nConstructs an SPI instance in 8bit dataframe mode.\nCreate a new I2C instance This will enable the peripheral …\nConstructs an SPI instance in half-duplex mode.\nInitialize the I/O driver with a interrupt priority.\nCreate a new I2C instance with a custom timeout value. …\nCreate a new I2C instance with a custom timeout value. …\nPeripherals Module\nSets up a global allocator for heap memory, required for …\nMacro to prepare buffers with fixed sizes for MQTT …\nThis attribute allows placing statics and functions into …\nProvide a buffer usable for DMA reads.\nRead bytes from SPI.\nRead received bytes from SPI FIFO.\nResets the I2C controller (FIFO + FSM + command list)\nResets the I2C controller (FIFO + FSM + command list)\nResets the I2C peripheral’s command registers\nResets the I2C peripheral’s command registers\nResets the transmit and receive FIFO buffers\nResets the transmit and receive FIFO buffers\nShorthand for creating a duration which represents seconds.\nSet channel duty HW\nSet channel duty HW\nSets the filter with a supplied threshold in clock cycles …\nSets the filter with a supplied threshold in clock cycles …\nSets the frequency of the I2C interface by calculating and …\nSets the frequency of the I2C interface by calculating and …\nSet the interrupt handler\nInstall the given interrupt handler replacing any …\nSplits the SYSTEM/DPORT peripheral into it’s parts.\nStart a duty-cycle fade\nStart a duty-cycle fade HW\nUnsafely create an instance of this peripheral out of thin …\nReturns all the peripherals <em>once</em>\nTakes the ESP peripherals. This should be one of the first …\nSplits the <code>SYSTEM</code> peripheral into its constituent parts. …\nStop listening for interrupts\nUnlisten the given interrupts\nUpdate the timer in HW\nWait for the transfer to finish.\nWait for the transfer to finish.\nPauses the execution for a specified number of …\nMacro to wait until WiFi is connected in async variation …\nSetup pins for this SPI instance.\nSetup pins for this SPI instance.\nProvide a buffer usable for DMA writes.\nWrite bytes to SPI.\nRepresents the IP address for the HiveMQ MQTT broker.\nRepresents the port number for the HiveMQ MQTT broker.\nRepresents the IP address for the WorldTime API server.\nCreates a new socket for communication over WiFi.\nMacro to create a network stack for WiFi communication.\nExtracts a UNIX timestamp from a server response.\nMacro to retrieve the IP configuration from the network …\nRetrieves the current time from the WorldTimeAPI.\nMacro to obtain a suitable timer based on the ESP device …\nRetrieves the current time as a UNIX timestamp from the …\nMacro to initialize the WiFi interface with the given SSID …\nConverts a string IP address into a 4-byte array.\nEstablishes a custom MQTT connection with the specified …\nEstablishes a default MQTT connection with predefined …\nWaits for and receives a message from the subscribed MQTT …\nThis function attempts to send the message to a specific …\nSubscribes to an MQTT topic.\nMacro to prepare buffers with fixed sizes for MQTT …\nReceives a message over the specified socket.\nSends a request over the specified socket.\nConverts a UNIX timestamp into hours, minutes, and seconds.\nMacro to wait until WiFi is connected in async variation …\nGets a weekday from a UNIX timestamp\nProvides a basic set of operations for interacting with a …\nRepresents segments of a display which can be targeted for …\nExtension of the <code>Display</code> trait to integrate with the …\nReturns the argument unchanged.\nILI9341 Display Driver\nCalls <code>U::from(self)</code>.\nMAX7219 Display Driver\nPCD8544 Display Driver\nResets the display.\nSets a single pixel on the display to a specified …\nWrites a section name to a specific segment of the display …\nWrites a string to the display at the current cursor …\nWrites a string to a specific segment of the display using …\nThe <code>Ili9341Display</code> struct represents an ILI9341 display …\nConstructs a new <code>Ili9341Display</code>.\nReturns the argument unchanged.\nThe inner display instance from the <code>mipidsi</code> crate …\nCalls <code>U::from(self)</code>.\nResets the display, filling it with a white color.\nSets a single pixel on the display\nWrites a section name to a specified display segment using …\nWrites a string to the center segment of the display using …\nWrites a string to a specified display segment using the …\nRepresents a MAX7219 display and provides methods to …\nCreates and initializes a new <code>Max7219Display</code>.\nReturns the argument unchanged.\nThe underlying MAX7219 driver instance.\nCalls <code>U::from(self)</code>.\nResets the display, turning all LEDs off and then back on.\nSets a pixel on the LED matrix display at the specified …\nDisplays static text on the LED matrix display. Text …\nDisplays scrolling text across the LED matrix display. …\nRepresents a PCD8544 display and provides methods to …\nCreates and initializes a new <code>Pcd8544Display</code>.\nReturns the argument unchanged.\nThe underlying PCD8544 driver instance.\nCalls <code>U::from(self)</code>.\nResets the display\nSets a pixel on the display at the specified coordinates.\nWrites a string to the display.\nContains the error value\nA non-blocking error\nContains the success value\nA different kind of error\nA non-blocking result\nThis operation requires blocking behavior to complete\nTurns the non-blocking expression <code>$e</code> into a blocking …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaps an <code>Error&lt;E&gt;</code> to <code>Error&lt;T&gt;</code> by applying a function to a …\nTrait for peripherals that can measure CO2 (or CO2 …\nTrait for peripherals that can measure distance.\nTrait for peripherals that can sense humidity levels.\nTrait for peripherals that communicate over I2C. …\nTrait for peripherals that can measure luminance.\nRepresents basic errors that can occur in peripheral …\nTrait for peripherals that can sense atmospheric pressure.\nTrait for peripherals capable of reading data which can …\nTrait for peripherals that can be explicitly shut down or …\nTrait for peripherals that communicate over SPI. …\nTrait for peripherals that can sense temperature.\nTrait for peripherals that can measure Volatile Organic …\nTrait for peripherals capable of writing data.\nAHT20 Sensor Interface\nBME280 Environmental Sensor Driver\nButton Module\nReturns the argument unchanged.\nMeasures the CO2 (or CO2eq) concentration in the air.\nMeasures the distance from the sensor to the nearest …\nReads the humidity level as a percentage.\nMeasures the ambient light intensity in lux.\nReads the atmospheric pressure in hPa (hectopascals).\nMeasures the concentration of VOCs in the air.\nCalls <code>U::from(self)</code>.\nJoystick Module\nPassive Infrared (PIR) Sensor Module\nSGP30 Sensor Module\nTSL2591 Light Sensor Module\nUltrasonic Distance Sensor Module\nA sensor instance for the AHT20\nCreates a new instance of the AHT20 sensor using the …\nReturns the argument unchanged.\nReads the current relative humidity from the AHT20 sensor.\nReads the current temperature from the AHT20 sensor.\nThe internal AHT20 driver from the <code>embedded_aht20</code> crate.\nCalls <code>U::from(self)</code>.\nRepresents the two possible interfaces to communicate with …\nA sensor instance for the BME280 that provides access to …\nCreates a new instance of the BME280 sensor using the …\nA delay provider for timing-dependent operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads the current relative humidity from the BME280 sensor.\nReads the current atmospheric pressure from the BME280 …\nReads the current temperature from the BME280 sensor.\nThe internal BME280 driver from the <code>bme280</code> crate used over …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA generic button that can report press and release events.\nRepresents possible events from a button press.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPolls the button to determine its current state and …\nRepresents a joystick with two axes and a select button.\nA threshold value to interpret the joystick’s value in …\nMacro for creating a <code>Joystick</code> instance.\nReturns the argument unchanged.\nRetrieves the current positions of both axes.\nRetrieves the current position of the X-axis.\nRetrieves the current position of the Y-axis.\nCalls <code>U::from(self)</code>.\nThe select button of the joystick, wrapped in a <code>Button</code> …\nChecks if the select button is currently pressed.\nRepresents a PIR motion sensor connected to a single …\nConstructs a new <code>PIRSensor</code> with the given input pin.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if motion has been detected by the sensor.\nRepresents an SGP30 air quality sensor.\nCreates and initializes an SGP30 sensor over the I2C bus.\nDelay provider for timing-sensitive operations.\nReturns the argument unchanged.\nMeasures the CO2 concentration in the air.\nMeasures the CO2 concentration in the air.\nThe internal SGP30 sensor instance.\nCalls <code>U::from(self)</code>.\nRepresents a TSL2591 ambient light sensor.\nInitializes the TSL2591 sensor over the I2C bus.\nDelay provider for timing-sensitive operations.\nReturns the argument unchanged.\nMeasures the ambient light intensity.\nThe internal TSL2591 driver instance.\nCalls <code>U::from(self)</code>.\nRepresents an ultrasonic distance sensor with trigger and …\nInitializes a new ultrasonic distance sensor.\nReturns the argument unchanged.\nMeasures the distance to an object by sending an …\nCalls <code>U::from(self)</code>.")