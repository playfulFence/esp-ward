name: Deploy Docs

on:
  push:
    branches:
      - main

jobs:
  examples: 
    name: Automated testing - ${{ matrix.options.chip }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        options: [
          # Xtensa chips:
            { chip: "esp32", target: "xtensa-esp32-none-elf" },
            { chip: "esp32s2", target: "xtensa-esp32s2-none-elf" },
            { chip: "esp32s3", target: "xtensa-esp32s3-none-elf" },
          # RISC-V chips:
            { chip: "esp32c3", target: "riscv32imc-unknown-none-elf" },
            { chip: "esp32c6", target: "riscv32imac-unknown-none-elf" },
            { chip: "esp32h2", target: "riscv32imac-unknown-none-elf" },
          ]

    steps:
      - uses: actions/checkout@v4
      - if: ${{ !contains(fromJson('["esp32", "esp32s2", "esp32s3"]'), matrix.options.chip) }}
        uses: dtolnay/rust-toolchain@v1
        with:
          target: riscv32imc-unknown-none-elf,riscv32imac-unknown-none-elf
          toolchain: nightly
          components: rust-src
      # Install the Rust toolchain for Xtensa devices:
      - if: contains(fromJson('["esp32", "esp32s2", "esp32s3"]'), matrix.options.chip)
        uses: esp-rs/xtensa-toolchain@v1.5
        with:
          buildtargets: ${{ matrix.options.chip }}
          default: true
          ldproxy: false

      - name: Build crate for ${{ matrix.options.soc }}
        run: |
          echo "Building crate for ${{ matrix.options.chip }}:"
          echo "\tBuilding crate for ${{ matrix.options.chip }} (basic feature)"
          cargo build --target ${{ matrix.options.target }} --features=${{ matrix.options.chip }}
          echo "\tBuilding crate for ${{ matrix.options.chip }} (alloc feature)"
          cargo build --target ${{ matrix.options.target }} --features=${{ matrix.options.chip }},alloc
          if [[ "${{ matrix.options.chip }}" != "esp32h2" ]]; then
            echo "\tBuilding crate for ${{ matrix.options.chip }} (wifi feature)"
            cargo build --target ${{ matrix.options.target }} --features=${{ matrix.options.chip }}-wifi
            echo "\tBuilding crate for ${{ matrix.options.chip }} (mqtt feature)"
            cargo build --target ${{ matrix.options.target }} --features=${{ matrix.options.chip }}-mqtt
  
          fi
      - name: Build examples for ${{ matrix.options.soc }}
        run: |
          for example in $(find examples -name '*.rs'); do
            example_name=$(basename "$example" .rs)
            echo "Building example $example_name"
            case $example_name in
              display_data|send_request)
                features="${{ matrix.options.chip }}-wifi"
                ;;
              etch_a_sketch|led_scrolling)
                features="${{ matrix.options.chip }},alloc"
                ;;
              mqtt_client)
                features="${{ matrix.options.chip }}-mqtt"
                ;;
              *)
                features="${{ matrix.options.chip }}"
                ;;
            esac
            if [[ "${{ matrix.options.chip }}" != "esp32h2" && "$example_name" != "display_data" && "$example_name" != "send_request" ]]; then
              cargo build --example $example_name --target ${{ matrix.options.target }} --features=$features
            fi
          done
      


      


  build-and-deploy-docs:
    runs-on: ubuntu-latest

    permissions:
      pages: write
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          target: riscv32imac-unknown-none-elf
          toolchain: nightly
          components: rust-src

      - name: Build docs
        run: |
          cargo doc --no-deps --features=esp32c6-mqtt,docs --target=riscv32imac-unknown-none-elf

      - name: Restructure documentation directory
        run: |
          mkdir -p ./docs
          cp -R ./target/riscv32imac-unknown-none-elf/doc/* ./docs/
          cp resources/index.html .
          cp resources/esp-rs.svg .
          find . -maxdepth 1 -mindepth 1 ! -name 'docs' ! -name '.git' ! -name 'index.html' ! -name 'esp-rs.svg' ! -name '.' -exec rm -rf {} +

      - name: Deploy to GitHub Pages

        uses: JamesIves/github-pages-deploy-action@v4.5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: .
